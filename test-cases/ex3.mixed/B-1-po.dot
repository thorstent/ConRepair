digraph PartialOrder {
	compound = true
	"36: registered = 0;" -> "37: initialised1 = 0;"
	"38: initialised2 = 0;" -> "39: initialised3 = 0;"
	"29: assume(initialised3 == 1);" -> "30: assert(registered == 1);"
	"39: initialised3 = 0;" -> "40: thread1();"
	"29: assume(initialised3 == 1);" -> "31: assert(initialised1 == 1);"
	"12: initialised2 = 1;" -> "13: registered = 1;"
	"37: initialised1 = 0;" -> "38: initialised2 = 0;"
	"30: assert(registered == 1);" -> "31: assert(initialised1 == 1);"
	"40: thread1();" -> "41: thread2();"
	"41: thread2();" -> "42: thread3();"
	"10: initialised1 = 1;" -> "11: initialised3 = 1;"
	"23: assume(registered == 1);" -> "24: assert(initialised2 == 1);"
	subgraph cluster4 {
		label = "16: int thread1() {...}"
		color = blue
		"18: srp_attach_transport();"  [label = "18: srp_attach_transport();"]
	}
	subgraph cluster1 {
		label = "21: int thread2() {...}"
		color = blue
		"23: assume(registered == 1);"  [label = "23: assume(registered == 1);"]
		"24: assert(initialised2 == 1);"  [label = "24: assert(initialised2 == 1);"]
	}
	subgraph cluster5 {
		label = "8: int srp_attach_transport() {...}"
		color = blue
		"11: initialised3 = 1;"  [label = "11: initialised3 = 1;"]
		"12: initialised2 = 1;"  [label = "12: initialised2 = 1;"]
		"13: registered = 1;"  [label = "13: registered = 1;"]
		"10: initialised1 = 1;"  [label = "10: initialised1 = 1;"]
	}
	subgraph cluster3 {
		label = "35: void main() {...}"
		color = blue
		"39: initialised3 = 0;"  [label = "39: initialised3 = 0;"]
		"41: thread2();"  [label = "41: thread2();"]
		"36: registered = 0;"  [label = "36: registered = 0;"]
		"37: initialised1 = 0;"  [label = "37: initialised1 = 0;"]
		"42: thread3();"  [label = "42: thread3();"]
		"38: initialised2 = 0;"  [label = "38: initialised2 = 0;"]
		"40: thread1();"  [label = "40: thread1();"]
	}
	subgraph cluster2 {
		label = "27: int thread3() {...}"
		color = blue
		"30: assert(registered == 1);"  [label = "30: assert(registered == 1);"]
		"31: assert(initialised1 == 1);"  [label = "31: assert(initialised1 == 1);"]
		"29: assume(initialised3 == 1);"  [label = "29: assume(initialised3 == 1);"]
	}
}